// The .source alias will be generated by 'fumadocs-mdx' postinstall script
// or when you run `next dev`.
// If TypeScript complains about '@/.source', you might need to run `npm run postinstall`
// or `npm run dev` once to generate it.
import { docs } from '../.source/index';
import { loader } from 'fumadocs-core/source';
import { icons } from 'lucide-react';
import { createElement } from 'react';
import { DeployStackLogo } from './components/DeployStackLogo';
import { createMDXSource } from 'fumadocs-mdx';
import type { PageTree } from 'fumadocs-core/server';

// Helper function for icon handling
function createIconHandler() {
  return (icon?: string) => {
    if (!icon) return;
    
    if (icon === 'DeployStackLogo') {
      return createElement(DeployStackLogo);
    }
    
    if (icon in icons) {
      return createElement(icons[icon as keyof typeof icons]);
    }
    
    return undefined;
  };
}

// Filter docs into separate sections
const allDocs = docs.docs;
const allMeta = docs.meta;

// Main docs (root level - exclude development and self-hosted)
const mainDocs = allDocs.filter((doc: any) => {
  const path = doc._file.path;
  return !path.startsWith('development/') && !path.startsWith('self-hosted/');
});

const mainMeta = allMeta.filter((meta: any) => {
  const path = meta._file.path;
  return !path.startsWith('development/') && !path.startsWith('self-hosted/');
});

// Development docs - keep the full path
const developmentDocs = allDocs.filter((doc: any) => 
  doc._file.path.startsWith('development/')
);

const developmentMeta = allMeta.filter((meta: any) => 
  meta._file.path.startsWith('development/')
);

// Self-hosted docs - keep the full path
const selfHostedDocs = allDocs.filter((doc: any) => 
  doc._file.path.startsWith('self-hosted/')
);

const selfHostedMeta = allMeta.filter((meta: any) => 
  meta._file.path.startsWith('self-hosted/')
);

// Create separate sources for each section
export const mainSource = loader({
  baseUrl: '/',
  source: createMDXSource(mainDocs, mainMeta),
  icon: createIconHandler(),
});

// For development and self-hosted, we keep the full path structure
export const developmentSource = loader({
  baseUrl: '/',  // Changed from '/development' to '/'
  source: createMDXSource(developmentDocs, developmentMeta),
  icon: createIconHandler(),
});

export const selfHostedSource = loader({
  baseUrl: '/',  // Changed from '/self-hosted' to '/'
  source: createMDXSource(selfHostedDocs, selfHostedMeta),
  icon: createIconHandler(),
});

// Unified source for backward compatibility and dynamic usage
export const source = {
  getPage(slug?: string[], locale?: string) {
    if (!slug || slug.length === 0) return mainSource.getPage(slug, locale);
    
    const firstSegment = slug[0];
    
    // For development section, use the full slug path
    if (firstSegment === 'development') {
      return developmentSource.getPage(slug, locale);
    }
    
    // For self-hosted section, use the full slug path
    if (firstSegment === 'self-hosted') {
      return selfHostedSource.getPage(slug, locale);
    }
    
    // For main docs, use as-is
    return mainSource.getPage(slug, locale);
  },
  
  getPages(locale?: string) {
    return [
      ...mainSource.getPages(locale),
      ...developmentSource.getPages(locale),
      ...selfHostedSource.getPages(locale),
    ];
  },
  
  generateParams() {
    // Get params from all sources
    const mainParams = mainSource.generateParams();
    const devParams = developmentSource.generateParams();
    const selfParams = selfHostedSource.generateParams();
    
    return [
      ...mainParams,
      ...devParams,
      ...selfParams,
    ];
  },
  
  // Get appropriate page tree based on current path
  getPageTree(path?: string) {
    if (path?.startsWith('/development')) return developmentSource.pageTree;
    if (path?.startsWith('/self-hosted')) return selfHostedSource.pageTree;
    return mainSource.pageTree;
  },
  
  // Default page tree for compatibility
  pageTree: mainSource.pageTree,
};
