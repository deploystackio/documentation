// The .source alias will be generated by 'fumadocs-mdx' postinstall script
// or when you run `next dev`.
// If TypeScript complains about '@/.source', you might need to run `npm run postinstall`
// or `npm run dev` once to generate it.
import { docs } from '../.source/index';
import { loader } from 'fumadocs-core/source';
import { icons } from 'lucide-react';
import { createElement } from 'react';
import { DeployStackLogo } from './components/DeployStackLogo';

export const source = loader({
  // Base URL for the documentation pages.
  // Since 'docs/index.md' should be the root page of the /docs section,
  // and our content is in the 'docs' directory (configured in source.config.ts),
  // baseUrl should be '/docs'. This means docs/index.mdx will be at /docs.
  baseUrl: '/docs',
  // The source of the documents, converted to Fumadocs format.
  source: docs.toFumadocsSource(),
  
  // Icon handler to support both lucide-react icons and custom icons
  icon(icon) {
    if (!icon) {
      return; // No icon specified
    }
    
    // Handle custom icons
    if (icon === 'DeployStackLogo') {
      return createElement(DeployStackLogo);
    }
    
    // Handle lucide-react icons
    if (icon in icons) {
      return createElement(icons[icon as keyof typeof icons]);
    }
    
    // If icon not found, return undefined
    return undefined;
  },

  // Optional: You can define global MDX components here if not done elsewhere
  // globalMdxComponents: getMDXComponents(),

  // Optional: Configure how slugs are generated
  // getSlugs: (file) => { ... }
});

// You might also want to export page tree and other utilities if needed directly
// export const pageTree = source.pageTree;
// export const getPage = source.getPage;
// export const generateParams = source.generateParams;
